/* eslint-disable no-undef */
const fs = require("fs");
const path = require("path");
const jiti = require("jiti")(__filename);

// Import configuration from a TypeScript file
const config = jiti("../i18next.config.ts");
const languages = config.locales || config.default?.locales;
const namespaces = config.namespaces || config.default?.namespaces;

if (!languages || !namespaces) {
  console.error(
    "❌ Could not load locales or namespaces from i18next.config.ts",
  );
  process.exit(1);
}

const localizationDir = path.join(__dirname, "../localization");
const outputFile = path.join(__dirname, "../src/i18n-resources.ts");

// Generate imports
let imports = "";
let resourcesObj = "{\n";

languages.forEach((lang) => {
  resourcesObj += `  ${lang}: {\n`;

  namespaces.forEach((ns) => {
    const importName = `${lang}_${ns}`;
    const filePath = `../localization/${lang}/${ns}.json`;

    // Check if a file exists
    const fullPath = path.join(__dirname, filePath);
    if (fs.existsSync(fullPath)) {
      imports += `import ${importName} from "${filePath}";\n`;
      resourcesObj += `    ${ns}: ${importName},\n`;
    } else {
      console.warn(`Warning: Missing file ${filePath}`);
      resourcesObj += `    ${ns}: {},\n`;
    }
  });

  resourcesObj += "  },\n";
});

resourcesObj += "}";

const output = `// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// Generated by generate-i18n-resources.js

${imports}
export const resources = ${resourcesObj};

export const languages = ${JSON.stringify(languages)} as const;
export const namespaces = ${JSON.stringify(namespaces)} as const;

export type LanguageKey = (typeof languages)[number];
export type Namespace = (typeof namespaces)[number];
`;

fs.writeFileSync(outputFile, output, "utf8");
console.log(`✅ Generated ${outputFile}`);
console.log(`📦 Languages: ${languages.join(", ")}`);
console.log(`📦 Namespaces: ${namespaces.join(", ")}`);
