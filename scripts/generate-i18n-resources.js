/* eslint-disable no-undef */
const fs = require("fs");
const path = require("path");
const jiti = require("jiti")(__filename);

// Import configuration from a TypeScript file
const config = jiti("../i18next.config.ts");
const languages = config.locales || config.default?.locales;
const namespaces = config.namespaces || config.default?.namespaces;

if (!languages || !namespaces) {
  console.error(
    "❌ Could not load locales or namespaces from i18next.config.ts",
  );
  process.exit(1);
}

const outputFile = path.join(__dirname, "../src/i18n-resources.ts");

// Check all files' existence in parallel
async function checkFilesExistence() {
  const fileChecks = [];
  const fileMap = new Map();

  languages.forEach((lang) => {
    namespaces.forEach((ns) => {
      const filePath = `../localization/${lang}/${ns}.json`;
      const fullPath = path.join(__dirname, filePath);
      const importName = `${lang}_${ns}`;

      fileChecks.push(
        fs.promises
          .access(fullPath, fs.constants.R_OK)
          .then(() => {
            fileMap.set(`${lang}:${ns}`, {
              importName,
              filePath,
              exists: true,
            });
          })
          .catch(() => {
            console.warn(`Warning: Missing file ${filePath}`);
            fileMap.set(`${lang}:${ns}`, {
              importName,
              filePath,
              exists: false,
            });
          }),
      );
    });
  });

  await Promise.all(fileChecks);
  return fileMap;
}

async function generateResources() {
  const fileMap = await checkFilesExistence();

  // Generate imports
  let imports = "";
  let resourcesObj = "{\n";

  languages.forEach((lang) => {
    resourcesObj += `  ${lang}: {\n`;

    namespaces.forEach((ns) => {
      const fileInfo = fileMap.get(`${lang}:${ns}`);

      if (fileInfo.exists) {
        imports += `import ${fileInfo.importName} from "${fileInfo.filePath}";\n`;
        resourcesObj += `    ${ns}: ${fileInfo.importName},\n`;
      } else {
        resourcesObj += `    ${ns}: {},\n`;
      }
    });

    resourcesObj += "  },\n";
  });

  resourcesObj += "}";

  const output = `// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// Generated by generate-i18n-resources.js

${imports}
export const resources = ${resourcesObj};

export const languages = ${JSON.stringify(languages)} as const;
export const namespaces = ${JSON.stringify(namespaces)} as const;

export type LanguageKey = (typeof languages)[number];
export type Namespace = (typeof namespaces)[number];
`;

  await fs.promises.writeFile(outputFile, output, "utf8");
  console.log(`✅ Generated ${outputFile}`);
  console.log(`📦 Languages: ${languages.join(", ")}`);
  console.log(`📦 Namespaces: ${namespaces.join(", ")}`);
}

generateResources().catch((error) => {
  console.error("❌ Error generating resources:", error);
  process.exit(1);
});
